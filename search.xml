<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java刷题笔记</title>
      <link href="/2022/08/23/articles/Java%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/08/23/articles/Java%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="try…catch…finally中都有return，返回谁？"><a href="#try…catch…finally中都有return，返回谁？" class="headerlink" title="try…catch…finally中都有return，返回谁？"></a>try…catch…finally中都有return，返回谁？</h3><p>return语句并不是函数的最终出口，如果有finally语句，这在return之后还会执行finally（return的值会暂存在栈里面，等待finally执行后再返回）</p><h3 id="while中不能声明变量，也不能用非boolean的数据或表达式"><a href="#while中不能声明变量，也不能用非boolean的数据或表达式" class="headerlink" title="while中不能声明变量，也不能用非boolean的数据或表达式"></a>while中不能声明变量，也不能用非boolean的数据或表达式</h3><h3 id="String字符串相加的问题"><a href="#String字符串相加的问题" class="headerlink" title="String字符串相加的问题"></a>String字符串相加的问题</h3><p>如果是”a”+”b”,这样的，在编译的时候会优化成”ab”，可以认为”a”+”b”&#x3D;”ab”  ,而A&#x3D;”a” , B&#x3D;”b” , A+B就不会优化，不相等，而是用语法糖，新建一个StringBuider来处理。</p><h3 id="default和protected的区别是："><a href="#default和protected的区别是：" class="headerlink" title="default和protected的区别是："></a>default和protected的区别是：</h3><p>前者只要是外部包，就不允许访问。后者只要是子类就允许访问，即使子类位于外部包。总结：default拒绝一切包外访问；protected接受包外的子类访问</p><h3 id="关于泛型"><a href="#关于泛型" class="headerlink" title="关于泛型"></a>关于泛型</h3><h4 id="使用泛型的好处"><a href="#使用泛型的好处" class="headerlink" title="使用泛型的好处"></a>使用泛型的好处</h4><ol><li>类型安全。<br> 泛型的主要目标是提高 Java 程序的类型安全。通过知道使用泛型定义的变量的类型限制，编译器可以在一个高得多的程度上验证类型假设。没有泛型，这些假设就只存在于程序员的头脑中（或者如果幸运的话，还存在于代码注释中）。</li><li>消除强制类型转换。<br> 泛型的一个附带好处是，消除源代码中的许多强制类型转换。这使得代码更加可读，并且减少了出错机会。</li><li>潜在的性能收益。<br>泛型为较大的优化带来可能。在泛型的初始实现中，编译器将强制类型转换（没有泛型的话，程序员会指定这些强制类型转换）插入生成的字节码中。但是更多类型信息可用于编译器这一事实，为未来版本的 JVM 的优化带来可能。由于泛型的实现方式，支持泛型（几乎）不需要 JVM 或类文件更改。所有工作都在编译器中完成，编译器生成类似于没有泛型（和强制类型转换）时所写的代码，只是更能确保类型安全而已。所以泛型只是提高了数据传输安全性，并没有改变程序运行的性</li></ol><h3 id="关于StringBuffer的长度和空间问题"><a href="#关于StringBuffer的长度和空间问题" class="headerlink" title="关于StringBuffer的长度和空间问题"></a>关于StringBuffer的长度和空间问题</h3><p>StringBuffer有长度和空间大小之分，默认空间为16，可以在StringBuffer()括号中更改空间大小，也可以用 .capacity()方法获取空间大小，和 .length是不同的</p><h3 id="关于子类父类的无参构造"><a href="#关于子类父类的无参构造" class="headerlink" title="关于子类父类的无参构造"></a>关于子类父类的无参构造</h3><p>子类new的时候默认调用父类的无参构造是因为子类的无参构造默认有个super()方法，如果super方法带参则走父类的带参构造方法，但是最大的前提是调用之前会初始化父类的成员变量，如果父类的成员变量也new了，那就先走new，再执行方法。</p><h3 id="Flush"><a href="#Flush" class="headerlink" title="Flush()"></a>Flush()</h3><p>flush（）函数强制将缓冲区中的字符流、字节流等输出，目的是如果输出流输出到缓冲区完成后，缓冲区并没有填满，那么缓冲区将会一直等待被填满。所以在关闭输出流之前要调用flush（）。</p><h3 id="Ready"><a href="#Ready" class="headerlink" title="Ready()"></a>Ready()</h3><p>ready()方法用于检查此流是否已准备好被读取。ready()方法是一种非静态方法，只能通过类对象访问，如果尝试使用类名称访问该方法，则会收到错误消息。在检查流的状态时，ready()方法可能会引发异常。IOException：在执行过程中遇到任何输入&#x2F;输出错误时，可能引发此异常。该方法的返回类型为boolean，当存在下一次读取的输入数据且没有阻塞时返回true。否则返回false。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/22/hello-world/"/>
      <url>/2022/08/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>服务器配置</title>
      <link href="/2022/08/18/articles/ArrayList%E5%8E%9F%E7%90%86/"/>
      <url>/2022/08/18/articles/ArrayList%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>手搓一个简单的arraylist，完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Shen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyList</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String[] arr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">INIT_SIZE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyList</span><span class="params">()</span> &#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">String</span>[INIT_SIZE];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加数据，并且到临界值时触发扩容机制</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 价值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= arr.length) &#123;</span><br><span class="line">            grow();</span><br><span class="line">        &#125;</span><br><span class="line">        arr[index++] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">int</span>)(arr.length*<span class="number">1.5</span>);</span><br><span class="line">        String[] newArray = <span class="keyword">new</span> <span class="title class_">String</span>[size];</span><br><span class="line">        System.arraycopy(arr,<span class="number">0</span>,newArray,<span class="number">0</span>,arr.length);</span><br><span class="line">        arr = newArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 指数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><pre><code>     原理其实很简单，就是一个有大小的数组，假设为10，当数据满了之后，下一个进来的数据会被搁置，并且触发扩容机制，换一个更大的数组，并把原来的数据copy进去，最后把搁置的数据加进去。（当然源码肯定比这个复杂，还有很多情况需要考虑）</code></pre><p>再来看上面的代码，首先初始化，给了一个初始数组<code>arr</code>，并且给一个初始化大小值<code>INIT_SIZE</code>，和一个下标<code>index</code>用于<code>get</code>方法</p><p>调用构造器初始化数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyList</span><span class="params">()</span> &#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">String</span>[INIT_SIZE];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再设置一个<code>size</code>方法获取数组大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>add</code>方法添加数据，并且记录<code>index</code>数组数据量大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加数据，并且到临界值时触发扩容机制</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 价值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= arr.length) &#123;</span><br><span class="line">            grow();</span><br><span class="line">        &#125;</span><br><span class="line">        arr[index++] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">int</span>)(arr.length*<span class="number">1.5</span>);</span><br><span class="line">        String[] newArray = <span class="keyword">new</span> <span class="title class_">String</span>[size];</span><br><span class="line">        System.arraycopy(arr,<span class="number">0</span>,newArray,<span class="number">0</span>,arr.length);</span><br><span class="line">        arr = newArray;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后设置<code>get</code>方法取值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 指数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[index];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>boolean所占大小问题</title>
      <link href="/2022/08/13/articles/Java%E6%97%A5%E5%B8%B8%E5%B0%8F%E8%AE%B0/"/>
      <url>/2022/08/13/articles/Java%E6%97%A5%E5%B8%B8%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Boolean所占字节大小"><a href="#Boolean所占字节大小" class="headerlink" title="Boolean所占字节大小"></a>Boolean所占字节大小</h3><p>boolean:在java规范中，没有明确指出boolean的大小。但在《Java虚拟机规范》给出了boolean类型在编译之后都使用int类型来代替，因此是4个字节，但boolean数组会被编译为byte数组中，此时每个boolean类型占1个字节。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea tomcat端口号被占用</title>
      <link href="/2022/08/11/articles/idea%E6%97%A5%E5%B8%B8%E5%B0%8F%E8%AE%B0/"/>
      <url>/2022/08/11/articles/idea%E6%97%A5%E5%B8%B8%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="启动tomcat显示端口被占用"><a href="#启动tomcat显示端口被占用" class="headerlink" title="启动tomcat显示端口被占用"></a>启动tomcat显示端口被占用</h3><p><img src="https://sweetlove7-hexo-1312970091.cos.ap-shanghai.myqcloud.com/images/error-zhanyong.png" alt="image-20220825231646672"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">打开cmd，在命令窗口输入</span><br><span class="line">netstat -aon|findstr xxxx(端口号)</span><br><span class="line">使用taskkill /pid xxx(任务代码) /f</span><br><span class="line">结束进程</span><br></pre></td></tr></table></figure><p><img src="https://sweetlove7-hexo-1312970091.cos.ap-shanghai.myqcloud.com/images/zhanyong-cmd.png" alt="image-20220825231807637"></p>]]></content>
      
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法未定义错误</title>
      <link href="/2022/08/01/articles/%E5%89%8D%E7%AB%AF%E6%96%B9%E6%B3%95%E6%9C%AA%E5%AE%9A%E4%B9%89%E6%8A%A5%E9%94%99/"/>
      <url>/2022/08/01/articles/%E5%89%8D%E7%AB%AF%E6%96%B9%E6%B3%95%E6%9C%AA%E5%AE%9A%E4%B9%89%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>记录一下碰到的bug，由于是小问题，也忘记截图了，就大概说一下</p><p>​我的项目前端是使用html+vue element ui写的，当时前端写了一个注册方法，和axios请求，死活没有用，最后看了一下网页源代码发现根本没有这个方法，可是我明明写了啊，最后发现是Chrome犯病了，清除了一下缓存就好了，太丢人了呜呜呜</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建教程</title>
      <link href="/2022/07/21/articles/Hexo%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
      <url>/2022/07/21/articles/Hexo%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo个人博客配置"><a href="#Hexo个人博客配置" class="headerlink" title="Hexo个人博客配置"></a>Hexo个人博客配置</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>1.安装Node.js</p><p>NodeJs官网：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p>下载之前要清楚自己Linux系统是x64还是ARM，不清楚的可以执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -m</span><br></pre></td></tr></table></figure><p>复制网址，通过<strong>wget</strong>命令下载</p><p>解压：<br><strong>tar xvf</strong> </p><p>进入bin目录查看版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node -v</span><br></pre></td></tr></table></figure><p>2.配置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">进入/etc执行vi profile，添加</span><br><span class="line">export PATH=$PATH:/usr/local/nodejs/bin</span><br><span class="line">退出后执行</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>3.检查是否配置成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="https://sweetlove7-hexo-1312970091.cos.ap-shanghai.myqcloud.com/images/jianchapeizhi.png" alt="image-20220821213321678"></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>1.安装git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install git-core</span><br><span class="line">如果npm下载慢可以切换到淘宝下载源</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>1.安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br><span class="line">或者 </span><br><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>2.初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>3.启动本地服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">CTRL+C关闭服务</span><br></pre></td></tr></table></figure><p>4.创建GitHub个人仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注册github账号</span><br><span class="line">创建个人仓库(new repository)，以 用户名.github.io 为仓库名，如：xxxxx.github.io</span><br></pre></td></tr></table></figure><p>5.生成SSH添加到GitHub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">回到GitHub bash</span><br><span class="line">ssh-keygen -t rsa -C &quot;邮箱地址&quot;     //是GitHub注册的邮箱地址</span><br><span class="line">之后四步回车就行</span><br></pre></td></tr></table></figure><p>6.找到ssh</p><p>在C盘&#x2F;用户&#x2F;用户名&#x2F;.ssh&#x2F;<br>打开 id_rsa.pub<br>只有一串很长的字符，CTRL+A全选，复制</p><p>回到 GitHub<br>点击右上角头像下拉菜单<br>选择 settings<br>找到 SSH &amp; GPG keys<br>打开<br>选择 SSH keys 右边的 new SSH key</p><p>名字随便取，把刚刚复制的字符串粘贴到下面key栏，原封不动粘贴<br>点击左下角 Add SSH key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">ssh -T git@github.com</span><br><span class="line">测试是否添加成功</span><br><span class="line">在弹出的输入选项中输入 yes</span><br><span class="line">最后出现自己的用户名(GitHub用户名)即成功</span><br></pre></td></tr></table></figure><p>7.生成本地博客</p><p>随意位置创建一个文件夹用于存放hexo本地文件，打开并右击空白处选择git bash here</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init </span><br><span class="line">初始化本地文件（将GitHub上的hexo文件下载到本地）</span><br></pre></td></tr></table></figure><p>如果会卡住，或者显示错误，是连接不上GitHub，自行挂梯子或等待（即使生成了很多文件也没用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br><span class="line">启动本地服务 会自动弹出本地地址，输入到浏览器即可本地访问</span><br></pre></td></tr></table></figure><p>8.将博客发布到网络</p><p>打开上一步建的存储hexo本地文件的文件夹，找到 _config.yml 打开<br>找到底部的 deploy代码块，并修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/xxxxx/xxxxx.github.io.git</span><br><span class="line">  branch: main</span><br><span class="line">  </span><br><span class="line">  xxxxx为GitHub用户名</span><br><span class="line">  保存并退出</span><br></pre></td></tr></table></figure><p>然后空白右键 git bash here</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line">生成本地静态文件</span><br><span class="line"></span><br><span class="line">hexo d</span><br><span class="line">将本地文件提交到github仓库中（第一次需要进行验证）</span><br><span class="line"></span><br><span class="line">打开GitHub -&gt; settings -&gt; Developer settings -&gt; Personal access token</span><br><span class="line">创建一个令牌密钥，名字随意，下面选项全选，并且生成令牌</span><br><span class="line"></span><br><span class="line">在上面 hexo d 命令之后会弹出一个登录框，选择 token 并将token令牌输入，点击登录</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成之后即可使用 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://xxxxx.github.io    //xxxxx为GitHub用户名</span><br></pre></td></tr></table></figure><p>访问你的博客了</p><h2 id="Butterfly配置"><a href="#Butterfly配置" class="headerlink" title="Butterfly配置"></a>Butterfly配置</h2><p>hexo的主题配置</p><p><a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p><p>butterfly配置的<strong>官方文档</strong>，直接参考即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Nodejs </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT使用</title>
      <link href="/2022/07/21/articles/GIT%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/21/articles/GIT%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>​版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><p><strong>Untracked</strong>:未跟踪,，此文件在文件夹中，但并没有加入到git库,不参与版本控制.通过<code>git add</code>状态变为<code>staged</code></p><p><strong>Unmodify</strong>:文件已经入库,未修改,即版本库中的文件快照内容与文件夹中完全一致.这种类型的文件有两种去处,如果它被修改,而变为<code>Modified</code> .如果使用<code>git rm</code>移出版本库,则成为<code>_untracked</code>文件</p><p><strong>Modified</strong>:文件已修改,仅仅是修改,并没有进行其他的操作.这个文件也有两个去处,通过<code>git add</code>可进入暂存<code>staged</code>状态,使用<code>git checkout</code>则丢弃修改过,返回到<code>unmodify</code>状态,这个<code>git checkout</code>即从库中取出文件,覆盖当前修改!</p><p><strong>Staged</strong>:暂存状态.执行 <code>git commit</code>则将修改同步到库中,这时库中的文件和本地文件又变为一致，文件为<code>unmodify</code>状态.执行<code>git reset HEAD filename</code> 取消暂存,文件状态为<code>Modified</code></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在使用的时候，先<code>add</code>提交到缓存区，再<code>commit</code>提交到本地仓库，再<code>pull</code>拉取远程仓库代码；若是需要提交到远程仓库，则重复上述步骤再执行<code>push</code>，当可以确认当前没有人提交更新过远程仓库，则可以不用<code>pull</code>直接<code>push</code></p><h3 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h3><p>整合到<strong>idea</strong></p><p><img src="https://sweetlove7-hexo-1312970091.cos.ap-shanghai.myqcloud.com/images/git1.png" alt="image-20220924153627117"></p><p>然后设置账号</p><p><img src="https://sweetlove7-hexo-1312970091.cos.ap-shanghai.myqcloud.com/images/git2.png" alt="image-20220924153747051"></p><p>token可以在账号设置里面设置私人令牌，可以直接登录，github和gitee都可以。</p><p>之后可以直接从仓库拉取代码创建新项目。</p><p><img src="https://sweetlove7-hexo-1312970091.cos.ap-shanghai.myqcloud.com/images/git3.png" alt="image-20220924154047906"></p><p>使用url直接拉取。</p><p><img src="https://sweetlove7-hexo-1312970091.cos.ap-shanghai.myqcloud.com/images/git4.png" alt="image-20220924154436655"></p><p>复制粘贴url</p><p><img src="https://sweetlove7-hexo-1312970091.cos.ap-shanghai.myqcloud.com/images/git5.png" alt="image-20220924154131355"></p><p>或是通过绑定的账号直接拉取指定的仓库代码。</p><p><img src="https://sweetlove7-hexo-1312970091.cos.ap-shanghai.myqcloud.com/images/git6.png" alt="image-20220924154221397"></p><h4 id="更新与提交"><a href="#更新与提交" class="headerlink" title="更新与提交"></a>更新与提交</h4><p>根据上面总结的方式提交与更新，右键项目根目录文件夹</p><p><img src="https://sweetlove7-hexo-1312970091.cos.ap-shanghai.myqcloud.com/images/git7.png" alt="image-20220924154652739"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql插入中文变成两个问号</title>
      <link href="/2022/07/19/articles/MySQL%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87%E5%8F%98%E6%88%90%E9%97%AE%E5%8F%B7%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/19/articles/MySQL%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87%E5%8F%98%E6%88%90%E9%97%AE%E5%8F%B7%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>​今天碰到一个懵逼的bug，一开始是测试搜索框的模糊搜索功能，后端使用的是mybatisPlus，结果发现英文可以，中文根本搜索不出来，然后插入数据的功能也有问题，中文插入会变成两个问号</p><p><img src="https://sweetlove7-hexo-1312970091.cos.ap-shanghai.myqcloud.com/images/wenhao.png" alt="img"></p><p>debug测试了一下，发现从前端一直到sql都是中文的，但是一进数据库就变成了问号，查了很多资料，数据库也是UTF-8的。</p><p><img src="https://sweetlove7-hexo-1312970091.cos.ap-shanghai.myqcloud.com/images/firstJDBC.png" alt="img"></p><p>最后发现是jdbc的url配置的问题，貌似配置顺序也有关，到目前还没有发现完整的解释</p><p><img src="https://sweetlove7-hexo-1312970091.cos.ap-shanghai.myqcloud.com/images/lastJDBC.png" alt="img"></p><p>使用后面一个是可以的，在上面错误之前我也改成过下面这种，只不过顺序没有换，所以目前我还是不知道具体原因</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器配置</title>
      <link href="/2022/07/11/articles/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/07/11/articles/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="服务器配置-Docker-Mysql"><a href="#服务器配置-Docker-Mysql" class="headerlink" title="服务器配置(Docker  Mysql)"></a>服务器配置(Docker  Mysql)</h2><h3 id="1-yum安装gcc相关环境（需要确保-虚拟机可以上外网-）"><a href="#1-yum安装gcc相关环境（需要确保-虚拟机可以上外网-）" class="headerlink" title="1.yum安装gcc相关环境（需要确保 虚拟机可以上外网 ）"></a>1.yum安装gcc相关环境（需要确保 虚拟机可以上外网 ）</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc </span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><h3 id="2-卸载旧版本，没有安装过忽略"><a href="#2-卸载旧版本，没有安装过忽略" class="headerlink" title="2.卸载旧版本，没有安装过忽略"></a>2.卸载旧版本，没有安装过忽略</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-engine</span><br></pre></td></tr></table></figure><h3 id="3-安装需要的软件包"><a href="#3-安装需要的软件包" class="headerlink" title="3.安装需要的软件包"></a>3.安装需要的软件包</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><h3 id="4-设置国内镜像仓库"><a href="#4-设置国内镜像仓库" class="headerlink" title="4.设置国内镜像仓库"></a>4.设置国内镜像仓库</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="5-更新仓库索引列表"><a href="#5-更新仓库索引列表" class="headerlink" title="5.更新仓库索引列表"></a>5.更新仓库索引列表</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><h3 id="6-安装Docker-CE"><a href="#6-安装Docker-CE" class="headerlink" title="6.安装Docker CE"></a>6.安装Docker CE</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h3 id="7-启动Docker"><a href="#7-启动Docker" class="headerlink" title="7.启动Docker"></a>7.启动Docker</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="8-测试命令"><a href="#8-测试命令" class="headerlink" title="8.测试命令"></a>8.测试命令</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker version </span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="9-卸载"><a href="#9-卸载" class="headerlink" title="9.卸载"></a>9.卸载</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop </span><br><span class="line">docker yum -y remove docker-ce docker-ce-cli containerd.io </span><br><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><p>容器镜像服务(这个先不管)</p><h3 id="10-拉取mysql镜像"><a href="#10-拉取mysql镜像" class="headerlink" title="10.拉取mysql镜像"></a>10.拉取mysql镜像</h3><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7.35</span><br><span class="line"></span><br><span class="line">docker run -d -p 3306:3306 -v /user/local/mysql/conf:/etc/mysql/conf.d -v /usr/local/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=******** -e TZ=Asia/Shanghai --name mysql01 8a8a506ccfdc</span><br></pre></td></tr></table></figure>” *** “为密码，自行设置。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
